# -*- coding: utf-8 -*-
"""Vaccination-Major-Project(Final).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dd97a0wMKQChPWBCcZJz7NjESJ6Jl1Ne

##**Importing all the required libraries**
"""

!pip install geopandas

#Data Processing
import pandas as pd
import numpy as np

#Visualisation
import plotly.graph_objects as go
from matplotlib import pyplot as plt
import warnings
import plotly.express as px
import seaborn as sns
from wordcloud import WordCloud
import geopandas
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot

warnings.filterwarnings('ignore')
sns.set(rc={'figure.figsize':(20,20)})
print('Setup complete')

pip install --upgrade plotly

#Mounting the drive
from google.colab import drive
drive.mount("/content/drive")

#Loading the dataset
df = pd.read_csv("/content/drive/MyDrive/Dataset/vaccine/country_vaccinations.csv")

#Dataset representation
df.tail()

#All the unique countries in the dataset
df["country"].unique()

#Extracting the required columns from df into new_df
new_df = df.groupby(["country",'iso_code','vaccines'])['total_vaccinations','people_vaccinated','people_fully_vaccinated',
                      'daily_vaccinations','total_vaccinations_per_hundred','people_vaccinated_per_hundred',
                      "people_fully_vaccinated_per_hundred",'daily_vaccinations_per_million'].max().reset_index()
new_df.head()

"""##**Analysis and Visualisation**

###**Total Vaccinations**
"""

data = (new_df[['country','total_vaccinations']].nlargest(20,'total_vaccinations'))
px.bar(data, x = 'country',y = 'total_vaccinations',labels={'country': 'Country','total_vaccinations':"Total Vaccinations"},title="Number of total vaccinations according to countries")

#print(df.isnull().sum())
#tdf = df.copy()
df['date'] = pd.to_datetime(df['date'])
df = df.sort_values('date', ascending=True)
df['date'] = df['date'].dt.strftime('%m-%d-%Y')
tdf = df.copy()
#print(df.isnull().sum())
for iso_code in tdf['iso_code'].unique():
    tdf.loc[tdf['iso_code'] == iso_code, :] = tdf.loc[tdf['iso_code'] == iso_code, :].fillna(method='ffill').fillna(0)
#print(df.isnull().sum())

fig = px.choropleth(
    tdf,                            # Input Dataframe
    locations="iso_code",           # identify country code column
    color="total_vaccinations",                     # identify representing column
    hover_name="country",              # identify hover name
    animation_frame="date",
    #category_orders={"frame": list(sorted(tdf['date'].unique()))},            # identify date column
    color_continuous_scale= 'viridis',
    projection="natural earth",        # select projection
    range_color=[0,3000000],
    title='<span style="font-size:36px; font-family:Times New Roman">Number of total vaccinations per country</span>',
)             # select range of dataset     
fig.show()

fig = px.treemap(new_df,names = 'country',values = 'total_vaccinations',path = ['vaccines','country'],
                 title="Total vaccinations per country grouped by vaccines",
                 color_discrete_sequence =px.colors.qualitative.Set1)
fig.show()

trace = go.Choropleth(
            locations = new_df['country'],
            locationmode='country names',
            z = new_df['total_vaccinations'],
            text =new_df['country'],
            autocolorscale =False,
            reversescale = True,
            colorscale = 'viridis',
            colorbar = dict(
                title = 'Total vaccinations',
                #tickprefix = '')
            )
        )

data = [trace]
layout = go.Layout(
    title = 'Total vaccinations per country',
    geo = dict(
        #showframe = True,
        #showlakes = False,
        #showcoastlines = True,
        projection = dict(
            type = 'natural earth'
        )
    )
)

fig = dict( data=data, layout=layout )
iplot(fig)

"""###**People Vaccinated**

"""

data = new_df[['country','people_vaccinated']].nlargest(20,'people_vaccinated')
fig = px.bar(data, x = 'country',y = 'people_vaccinated',labels={'country': 'Country','people_vaccinated':"People Vaccinated"},title="Number of people vaccinated according to countries",)
fig.show()

fig = px.choropleth(
    tdf,                            # Input Dataframe
    locations="iso_code",           # identify country code column
    color="people_vaccinated",                     # identify representing column
    hover_name="country",              # identify hover name
    animation_frame="date",
    #category_orders={"frame": list(sorted(tdf['date'].unique()))},            # identify date column
    color_continuous_scale= 'viridis',
    projection="natural earth",        # select projection
    range_color=[0,5000000],
    title='<span style="font-size:36px; font-family:Times New Roman">Number of people vaccinated per country</span>',
)             # select range of dataset     
fig.show()

fig = px.treemap(new_df,names = 'country',values = 'people_vaccinated',path = ['vaccines','country'],
                 title="People vaccinated per country grouped by vaccines",
                 color_discrete_sequence =px.colors.qualitative.Set1)
fig.show()

trace = go.Choropleth(
            locations = new_df['country'],
            locationmode='country names',
            z = new_df['people_vaccinated'],
            text =new_df['country'],
            autocolorscale =False,
            reversescale = True,
            colorscale = 'viridis',
            
            colorbar = dict(
                title = 'people_vaccinated',
                tickprefix = '')
        )

data = [trace]
layout = go.Layout(
    title = 'People vaccinated per country',
    geo = dict(
        projection = dict(
            type = 'natural earth'
        )
    )
)

fig = dict( data=data, layout=layout )
iplot(fig)

"""###**People Fully Vaccinated**

"""

data = new_df[['country','people_fully_vaccinated']].nlargest(20,'people_fully_vaccinated')
fig = px.bar(data, x = 'country',y = 'people_fully_vaccinated',labels={'country': 'Country','people_fully_vaccinated':"People Fully Vaccinated"},title="Number of people fully vaccinated according to countries",)
fig.show()

fig = px.choropleth(
    tdf,                            # Input Dataframe
    locations="iso_code",           # identify country code column
    color="people_fully_vaccinated",                     # identify representing column
    hover_name="country",              # identify hover name
    animation_frame="date",
    #category_orders={"frame": list(sorted(tdf['date'].unique()))},            # identify date column
    color_continuous_scale= 'viridis',
    projection="natural earth",        # select projection
    range_color=[0,5000000],
    title='<span style="font-size:36px; font-family:Times New Roman">Number of people fully vaccinated per country</span>',
)             # select range of dataset     
fig.show()

fig = px.treemap(new_df,names = 'country',values = 'people_fully_vaccinated',path = ['vaccines','country'],
                 title="People fully vaccinated per country grouped by vaccines",
                 color_discrete_sequence =px.colors.qualitative.Set1)
fig.show()

trace = go.Choropleth(
            locations = new_df['country'],
            locationmode='country names',
            z = new_df['people_fully_vaccinated'],
            text =new_df['country'],
            autocolorscale =False,
            reversescale = True,
            colorscale = 'viridis',
            
            colorbar = dict(
                title = 'People fully vaccinated',
                tickprefix = '')
        )

data = [trace]
layout = go.Layout(
    title = 'People fully vaccinated per country',
    geo = dict(
        
        projection = dict(
            type = 'natural earth'
        )
    )
)

fig = dict( data=data, layout=layout )
iplot(fig)

"""###**Daily Vaccinations**"""

#Representing the top 20 countries having highest daily vaccinations
data = new_df[['country','daily_vaccinations']].nlargest(20,'daily_vaccinations')
fig = px.bar(data, x = 'country',y = 'daily_vaccinations',labels={'country': 'Country','daily_vaccinations': "Daily Vaccinations"},title="Number of daily vaccinations according to countries",)
fig.show()

fig = px.choropleth(
    tdf,                            # Input Dataframe
    locations="iso_code",           # identify country code column
    color="daily_vaccinations",                     # identify representing column
    hover_name="country",              # identify hover name
    animation_frame="date",
    #category_orders={"frame": list(sorted(tdf['date'].unique()))},            # identify date column
    color_continuous_scale= 'viridis',
    projection="natural earth",        # select projection
    range_color=[0,1000000],
    title='<span style="font-size:36px; font-family:Times New Roman">Number of daily vaccinations per country</span>',
)             # select range of dataset     
fig.show()

fig = px.treemap(new_df,names = 'country',values = 'daily_vaccinations',path = ['vaccines','country'],
                 title="Daily vaccinations per country grouped by vaccines",
                 color_discrete_sequence =px.colors.qualitative.Set1)
fig.show()

trace = go.Choropleth(
            locations = new_df['country'],
            locationmode='country names',
            z = new_df['daily_vaccinations'],
            text =new_df['country'],
            autocolorscale =False,
            reversescale = True,
            colorscale = 'viridis',
            colorbar = dict(
                title = 'Daily vaccinations',
                #tickprefix = '')
        ))

data = [trace]
layout = go.Layout(
    title = 'Daily vaccinations per country',
    geo = dict(
        projection = dict(
            type = 'natural earth'
        )
    )
)

fig = dict( data=data, layout=layout )
iplot(fig)

"""##**Density-wise Analysis and Visualisation**

###**Total Vaccinations Per Hundred**
"""

#Representing the top 20 countries having highest people vaccinated
data = new_df[['country','total_vaccinations_per_hundred']].nlargest(20,'total_vaccinations_per_hundred')
fig = px.bar(data, x = 'country',y = 'total_vaccinations_per_hundred',labels={'country': 'Country','total_vaccinations_per_hundred':"Total vaccinations per hundred"},title="Number of total vaccinations per hundred according to countries",)
fig.show()

fig = px.choropleth(
    tdf,                            # Input Dataframe
    locations="iso_code",           # identify country code column
    color="total_vaccinations_per_hundred",                     # identify representing column
    hover_name="country",              # identify hover name
    animation_frame="date",
    #category_orders={"frame": list(sorted(tdf['date'].unique()))},            # identify date column
    color_continuous_scale= 'viridis',
    projection="natural earth",        # select projection
    range_color=[0,100],
    title='<span style="font-size:36px; font-family:Times New Roman">Number of total vaccinations per hundred per country</span>',
)             # select range of dataset     
fig.show()

fig = px.treemap(new_df,names = 'country',values = 'total_vaccinations_per_hundred',path = ['vaccines','country'],
                 title="Total vaccinations per hundred per country grouped by vaccines",
                 color_discrete_sequence =px.colors.qualitative.Set1)
fig.show()

trace = go.Choropleth(
            locations = new_df['country'],
            locationmode='country names',
            z = new_df['total_vaccinations_per_hundred'],
            text =new_df['country'],
            #autocolorscale =False,
            reversescale = True,
            colorscale = 'viridis',
            
            colorbar = dict(
                title = 'Total vaccinations per hundred',
                tickprefix = '')
        )

data = [trace]
layout = go.Layout(
    title = 'Total vaccinations per hundred per country',
    geo = dict(
        
        projection = dict(
            type = 'natural earth'
        )
    )
)

fig = dict( data=data, layout=layout )
iplot(fig)

"""###**People Vaccinated Per Hundred**"""

#Representing the top 20 countries having highest people vaccinated
data = new_df[['country','people_vaccinated_per_hundred']].nlargest(20,'people_vaccinated_per_hundred')
fig = px.bar(data, x = 'country',y = 'people_vaccinated_per_hundred',labels={'country': 'Country','people_vaccinated_per_hundred':"People vaccinated per hundred"},title="Number of people vaccinated per hundred according to countries",)
fig.show()

fig = px.choropleth(
    tdf,                            # Input Dataframe
    locations="iso_code",           # identify country code column
    color="people_vaccinated_per_hundred",                     # identify representing column
    hover_name="country",              # identify hover name
    animation_frame="date",
    #category_orders={"frame": list(sorted(tdf['date'].unique()))},            # identify date column
    color_continuous_scale= 'viridis',
    projection="natural earth",        # select projection
    range_color=[0,70],
    title='<span style="font-size:36px; font-family:Times New Roman">Number of people vaccinated per hundred per country</span>',
)             # select range of dataset     
fig.show()

fig = px.treemap(new_df,names = 'country',values = 'people_vaccinated_per_hundred',path = ['vaccines','country'],
                 title="People vaccinated per hundred per country grouped by vaccines",
                 color_discrete_sequence =px.colors.qualitative.Set1)
fig.show()

trace = go.Choropleth(
            locations = new_df['country'],
            locationmode='country names',
            z = new_df['people_vaccinated_per_hundred'],
            text =new_df['country'],
            autocolorscale =False,
            reversescale = True,
            colorscale = 'viridis',
            
            colorbar = dict(
                title = 'People vaccinated per hundred',
                tickprefix = '')
        )

data = [trace]
layout = go.Layout(
    title = 'People vaccinated per hundred per country',
    geo = dict(
        
        projection = dict(
            type = 'natural earth'
        )
    )
)

fig = dict( data=data, layout=layout )
iplot(fig)

"""###**People Fully Vaccinated Per Hundred**"""

#Representing the top 20 countries having highest people vaccinated
data = new_df[['country','people_fully_vaccinated_per_hundred']].nlargest(20,'people_fully_vaccinated_per_hundred')
fig = px.bar(data, x = 'country',y = 'people_fully_vaccinated_per_hundred',labels={'country': 'Country','people_fully_vaccinated_per_hundred':"People fully vaccinated per hundred"},title="Number of people fully vaccinated per hundred per country according to countries",)
fig.show()

fig = px.choropleth(
    tdf,                            # Input Dataframe
    locations="iso_code",           # identify country code column
    color="people_fully_vaccinated_per_hundred",                     # identify representing column
    hover_name="country",              # identify hover name
    animation_frame="date",
    #category_orders={"frame": list(sorted(tdf['date'].unique()))},            # identify date column
    color_continuous_scale= 'viridis',
    projection="natural earth",        # select projection
    range_color=[0,50],
    title='<span style="font-size:36px; font-family:Times New Roman">Number of people fully vaccinated per hundred per country</span>',
    
)             # select range of dataset  

fig.show()

fig = px.treemap(new_df,names = 'country',values = 'people_fully_vaccinated_per_hundred',path = ['vaccines','country'],
                 title="People fully vaccinated per hundred per country grouped by vaccines",
                 color_discrete_sequence =px.colors.qualitative.Set1)
fig.show()

trace = go.Choropleth(
            locations = new_df['country'],
            locationmode='country names',
            z = new_df['people_fully_vaccinated_per_hundred'],
            text =new_df['country'],
            autocolorscale =False,
            reversescale = True,
            colorscale = 'viridis',
            
            colorbar = dict(
                title = 'People fully vaccinated per hundred',
                tickprefix = '')
        )

data = [trace]
layout = go.Layout(
    title = 'People fully vaccinated per hundred per country',
    geo = dict(
        
        projection = dict(
            type = 'natural earth'
        )
    )
)

fig = dict( data=data, layout=layout )
iplot(fig)

"""###**Daily Vaccinations Per Million**"""

#Representing the top 20 countries having highest people vaccinated
data = new_df[['country','daily_vaccinations_per_million']].nlargest(20,'daily_vaccinations_per_million')
fig = px.bar(data, x = 'country',y = 'daily_vaccinations_per_million',labels={'country': 'Country','daily_vaccinations_per_million':"Daily vaccinations per million"},title="Number of daily vaccinations per million according to countries",)
fig.show()

fig = px.choropleth(
    tdf,                            # Input Dataframe
    locations="iso_code",           # identify country code column
    color="daily_vaccinations_per_million",                     # identify representing column
    hover_name="country",              # identify hover name
    animation_frame="date",
    #category_orders={"frame": list(sorted(tdf['date'].unique()))},            # identify date column
    color_continuous_scale= 'viridis',
    projection="natural earth",        # select projection
    range_color=[0,10000],
    title='<span style="font-size:36px; font-family:Times New Roman">Number of daily vaccinations per million per country</span>',
)             # select range of dataset     
fig.show()

fig = px.treemap(new_df,names = 'country',values = 'daily_vaccinations_per_million',path = ['vaccines','country'],
                 title="Daily vaccinations per million per country grouped by vaccines",
                 color_discrete_sequence =px.colors.qualitative.Set1)
fig.show()

trace = go.Choropleth(
            locations = new_df['country'],
            locationmode='country names',
            z = new_df['daily_vaccinations_per_million'],
            text =new_df['country'],
            autocolorscale =False,
            reversescale = True,
            colorscale = 'viridis',
            
            colorbar = dict(
                title = 'Daily vaccinations per million',
                tickprefix = '')
        )

data = [trace]
layout = go.Layout(
    title = 'Daily vaccinations per million per country',
    geo = dict(
        
        projection = dict(
            type = 'natural earth'
        )
    )
)

fig = dict( data=data, layout=layout )
iplot(fig)

"""##**Data Preprocessing For Future Forecasting**"""

df = df[['date', 'country','iso_code','daily_vaccinations','people_vaccinated_per_hundred','people_fully_vaccinated_per_hundred','vaccines',]]
df.head()

#print(df.shape,df.isnull().sum())

#Filling NAN values with mean value of daily vaccinations
#mean_value_dc = df['daily_vaccinations'].mean() #gfg['G2'].mean()
#df['daily_vaccinations'].fillna(value = mean_value_dc, inplace=True)

#Filling NAN values with mean value of people vaccinated per hundred
#mean_value_pc = df['people_vaccinated_per_hundred'].mean() #gfg['G2'].mean()
#df['people_vaccinated_per_hundred'].fillna(value = mean_value_pc, inplace=True)

#Filling NAN values with mean value of people fully vaccinated per hundred
#mean_value_pfc = df['people_fully_vaccinated_per_hundred'].mean() #gfg['G2'].mean()
#df['people_fully_vaccinated_per_hundred'].fillna(value = mean_value_pfc, inplace=True)

#print(mean_value_dc,mean_value_pc, mean_value_pfc)
print(df.isnull().sum())
#df.select_dtypes(include=['object']).isnull().sum()

#Loading continents dataset
continents = pd.read_csv('/content/drive/MyDrive/Dataset/vaccine/continents2.csv')
continents.head()

#Merging the two datasets
data = df.merge(continents[['alpha-3', 'region', 'sub-region']],how='left',left_on = 'iso_code',right_on = 'alpha-3',).drop(columns=['alpha-3'])
data.head()

data.columns = ['date', 'country', 'iso_code', 'daily_vaccinations', 'people_vaccinated_per_hundred', 'people_fully_vaccinated_per_hundred','vaccines', 'continent', 'region']

data.loc[data.continent == 'Oceania', 'continent'] = 'Australia'
data.continent.value_counts()

data.isnull().sum()

data.vaccines.value_counts()

df = data[['iso_code', 'vaccines']].drop_duplicates()
df.shape

map_plot_df = pd.concat([pd.Series(row['iso_code'], row['vaccines'].split(','))              
                         for _, row in df.iterrows()]).reset_index()

#rename columns
map_plot_df.columns = ['vaccine', 'iso_code']

#strip white spaces
map_plot_df['vaccine'] = map_plot_df['vaccine'].str.strip(' ')

map_plot_df.vaccine.value_counts()
#print(map_plot_df)
#print(len(map_plot_df["iso_code"].unique()))

"""
##**Future Forecasting Of Vaccination Percentage Using FBProphet**
 

"""

#Forecasting using FBProphet Model
from fbprophet import Prophet

def fbprophet_predict_and_plot(data, region_column, region, vaccination_metric, min_date = '2020-12-13', max_date='2021-5-17', future_days=10, plot=True):
    '''
    Plots or returns FbProphet predictions for a vaccination metric

    INPUT 
    data : Pandas dataframe
        a dataframe holding the data to be used for training and plotting 
        must contain a date column (unique dates), a region column and a vaccination related metric
    region_column : string
        name of the region column (continent/region/country)
    region : string
        region of interest - the region to get predictions and plots for
        must be a value of region_column
    vaccination_metric : string
        name of the vaccination metric column (daily_vaccinations/people_fully_vaccinated_per_hundred)
    min_date : string
        lower date limit for the training data
    max_date : string
        upper date limit for the training data
    future_days : integer
        number of days to forecast
    plot : boolean
        whether you want a plot or the forecast
    '''

    df_data = data[(data[region_column] == region)]
    df_data = df_data[['date', vaccination_metric]]
    df_data.columns = ['ds', 'y']
    #return df_data.head()
    
    model = Prophet(interval_width = 0.90,changepoints=None, n_changepoints=10, changepoint_range=0.8,)#yearly_seasonality=True, daily_seasonality=True,)
    model.fit(df_data)
    future = model.make_future_dataframe(periods=future_days)
    forecast = model.predict(future)
    if plot:
        fig = plot_plotly(model, forecast)
        fig.show()
    else:
        return forecast

#print(data.country.unique())
countries = ['India','China','United Kingdom','United States','Russia','Spain']
print(countries)
#print(data['India'].shape[0])

#print('Predicted percentage of people vaccinated until July: \n======================================================')
vaccination_summary = []
reqdate = '2021-07-01'
for country in countries:   
    #if there are no people_vaccinated_per_hundred values for country, skip country
    if data[(data['people_fully_vaccinated_per_hundred'].notnull()) & (data['country'] == country)].shape[0] > 2:
        min_date = data[(data['country'] == country)].date.min()
        forecast = fbprophet_predict_and_plot(data = data,region_column = 'country',region = country,vaccination_metric = 'people_fully_vaccinated_per_hundred',
                                              min_date = min_date,future_days = 50,plot = False,)
        #print('\t',country,'\t',forecast.yhat)
        vaccination_summary.append([country,round(float(forecast.loc[forecast.ds == reqdate].yhat),2) ])
        #print('\t', country, '\t', round(float(forecast.loc[forecast.ds == '2021-07-01'].yhat),2), '%')

        #print predicted percentage of vaccinated people until June
        #print('\t', country, '\t', round(float(forecast.loc[forecast.ds == '2021-06-01'].yhat),2), '%')

print('Predicted percentage of people fully vaccinated until',reqdate) #July: \n======================================================')
print("Country", "%",)
#for i in vaccination_summary:
  #print(i[0],i[1])
vs_df = pd.DataFrame(vaccination_summary,columns = ("Country","Percentage of people fully vaccinated"))
vs_df.head()