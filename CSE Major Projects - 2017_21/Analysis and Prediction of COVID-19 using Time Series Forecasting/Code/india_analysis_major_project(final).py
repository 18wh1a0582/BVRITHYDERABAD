# -*- coding: utf-8 -*-
"""Copy of India-Analysis-Major-Project(Final).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qas3hnxeghMKwfoB3jBmzPY_vEGNJv51

## **Importing all the required Libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install chart_studio
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
import plotly
import plotly.express as px

from sklearn.preprocessing import PolynomialFeatures 
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR

from statsmodels.tsa.api import Holt,SimpleExpSmoothing,ExponentialSmoothing
from sklearn.metrics import mean_squared_error as mse
from sklearn.metrics import r2_score
import statsmodels.api as sm
from sklearn.metrics import mean_absolute_error as mae
!pip install pmdarima
from pmdarima.arima import auto_arima
from sklearn.metrics import mean_squared_error
from datetime import timedelta
from fbprophet import Prophet


import plotly.graph_objects as go
#plt.rcParams['figure.figsize']=17,8
import cufflinks as cf
import plotly.offline as pyo
from plotly.offline import init_notebook_mode,plot,iplot
import folium 
from folium import plugins
plt.rcParams['figure.figsize'] = 10, 12
import warnings
warnings.filterwarnings('ignore')

from google.colab import drive
drive.mount("/content/drive")

#Dataset
df= pd.read_csv("/content/drive/MyDrive/Covid-19-Project/Major-Project-Datasets/covid_19_india.csv")
df.tail()

df.isnull().sum()
df.shape

#Removing ConfirmedIndianNational,ConfirmedForeignNational columns
df.drop(['ConfirmedIndianNational','ConfirmedForeignNational'],axis=1,inplace=True)
df.shape

df.head()

df['Date'] = pd.to_datetime(df['Date'],dayfirst = True)

"""## **1.Data Visualization for India**



"""

df_confirmed_india=df.groupby('Date')['Confirmed'].sum().reset_index()
df_cured_india=df.groupby('Date')['Cured'].sum().reset_index()
df_death_india=df.groupby('Date')['Deaths'].sum().reset_index()
#Displaying Confirmed , deaths and recoverd Cases till Yesterday
print("The Confirmed Cases are",df_confirmed_india.Confirmed.max())
print("The Recovered Cases are",df_cured_india.Cured.max())
print("The Deaths Cases are",df_death_india.Deaths.max())
df.shape

#confirmed Cases Line graph
fig = go.Figure()
fig.add_trace(go.Scatter(x=df_confirmed_india['Date'], y = df_confirmed_india['Confirmed'], mode='lines+markers',name='Total Cases'))
fig.update_layout(title_text='Confirmed Cases in India',xaxis_title="Date",yaxis_title="Confirmed Cases",plot_bgcolor='rgb(230, 230, 230)')
fig.show()
# Confirmed cases Line-Bar graph
fig = px.bar(df_confirmed_india, x="Date", y="Confirmed", height=400)
fig.update_layout(title_text='Coronavirus confirmed Cases in India on daily basis')
fig.show()

#Recovered Cases Line graph
fig = go.Figure()
fig.add_trace(go.Scatter(x=df_cured_india['Date'], y = df_cured_india['Cured'], mode='lines+markers',name='Total Cases'))
fig.update_layout(title_text='Recovered Cases in India',xaxis_title="Date",yaxis_title="Recovered Cases",plot_bgcolor='rgb(230, 230, 230)')
fig.show()
# Recovered cases Line-Bar graph
fig = px.bar(df_cured_india, x="Date", y="Cured", height=400)
fig.update_layout(title_text='Coronavirus Recovered Cases in India on daily basis')
fig.show()


#Death Cases Line graph
fig = go.Figure()
fig.add_trace(go.Scatter(x=df_death_india['Date'], y = df_death_india['Deaths'], mode='lines+markers',name='Total Deaths',line=dict(color='Red', width=2)))
fig.update_layout(title_text='Death Cases in India',xaxis_title="Date",yaxis_title="Death Cases",plot_bgcolor='rgb(230, 230, 230)')
fig.show()
#Death Cases Line-Bar graph
import plotly.express as px
fig = px.bar(df_death_india, x="Date", y="Deaths", barmode='group', height=500)
fig.update_layout(title_text='Coronavirus Deaths in India on daily basis')
fig.show()

#Plotting Confirmed, Deaths and Recovered Cases in India
fig = go.Figure()
fig.add_trace(go.Scatter(x=df_confirmed_india['Date'], y=df_confirmed_india['Confirmed'], mode='lines+markers', name='Confirmed',line=dict(color='blue', width=2)))
fig.add_trace(go.Scatter(x=df_death_india['Date'], y=df_death_india['Deaths'], mode='lines+markers', name='Deaths', line=dict(color='Red', width=2)))
fig.add_trace(go.Scatter(x=df_cured_india['Date'], y=df_cured_india['Cured'], mode='lines+markers', name='Recovered', line=dict(color='Green', width=2)))
fig.update_layout(title='India COVID-19 Cases', xaxis_tickfont_size=14,yaxis=dict(title='Number of Cases'))
fig.show()

"""## **2.Data Visualization For Each State**


"""

#Grouping confirmed,deaths,recovered based on States
state_cases = df.groupby('State/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()

#Calculating Active Cases,Death rate and Recovered rate
state_cases['Active'] = state_cases['Confirmed'] - (state_cases['Deaths']+ state_cases['Cured'])
state_cases["Death Rate (per 100)"] = np.round(100*state_cases["Deaths"]/state_cases["Confirmed"],2)
state_cases["Cure Rate (per 100)"] = np.round(100*state_cases["Cured"]/state_cases["Confirmed"],2)
state_cases.head()

!pip install --upgrade plotly

#treemap for Death Cases in India
px.treemap(state_cases,path=["State/UnionTerritory"],values="Deaths",title="Overall States Comparision of deaths")

#treemap for Confirmed Cases in India

px.treemap(state_cases,path=["State/UnionTerritory"],values="Confirmed",title="Overall States Comparision of Confirmed")

#treemap for Recovered Cases in India

px.treemap(state_cases,path=["State/UnionTerritory"],values="Cured",title="Overall States Comparision of Recovered cases")

# Top 10 states with maximum number of Confirmed Cases
top_10=state_cases.groupby('State/UnionTerritory')['Confirmed'].sum().sort_values(ascending=False).reset_index()
trace = go.Table(
    domain=dict(x=[0, 0.52],
                y=[0, 1.0]),
    header=dict(values=["State/UnionTerritory","Confirmed Cases"],
                fill = dict(color = '#119DFF'),
                font = dict(color = 'white', size = 14),
                align = ['center'],
               height = 30),
    cells=dict(values=[top_10['State/UnionTerritory'].head(10),top_10['Confirmed'].head(10)],
               fill = dict(color = ['#25FEFD', 'white']),
               align = ['center'],height=20))

trace1 = go.Bar(x=top_10['State/UnionTerritory'].head(10),
                y=top_10['Confirmed'].head(10),
                marker=dict(color='blue'),opacity=0.60)
layout = dict(
    width=1000,
    height=430,
    title='Top-10 States with Highest No. of Cases',
    xaxis1=dict(**dict(domain=[0.6, 1.0])),
)
fig1 = dict(data=[trace, trace1], layout=layout)
iplot(fig1)

# Top 10 states with maximum number of Recovery
top_10=state_cases.groupby('State/UnionTerritory')['Cured'].sum().sort_values(ascending=False).reset_index()
trace = go.Table(
    domain=dict(x=[0, 0.52],
                y=[0, 1.0]),
    header=dict(values=["State/UnionTerritory","Cured Cases"],
                fill = dict(color = '#119DFF'),
                font = dict(color = 'white', size = 14),
                align = ['center'],
               height = 30),
    cells=dict(values=[top_10['State/UnionTerritory'].head(10),top_10['Cured'].head(10)],
               fill = dict(color = ['#88EF88', 'white']),
               align = ['center'],height=20))

trace1 = go.Bar(x=top_10['State/UnionTerritory'].head(10),
                y=top_10['Cured'].head(10),
                marker=dict(color='#488448'),opacity=1.0)
layout = dict(
    width=1000,
    height=450,
    title='Top-10 States with Highest Recovery',
    xaxis1=dict(**dict(domain=[0.65, 1])),
)
fig1 = dict(data=[trace, trace1], layout=layout)
iplot(fig1)

# Top 10 states with maximum number of Deaths
top_10=state_cases.groupby('State/UnionTerritory')['Deaths'].sum().sort_values(ascending=False).reset_index()
trace = go.Table(
    domain=dict(x=[0, 0.52],
                y=[0, 1.0]),
    header=dict(values=["State/UnionTerritory","Deaths Cases"],
                fill = dict(color = '#119DFF'),
                font = dict(color = 'white', size = 14),
                align = ['center'],
               height = 30),
    cells=dict(values=[top_10['State/UnionTerritory'].head(10),top_10['Deaths'].head(10)],
               fill = dict(color = ['salmon', 'white']),
               align = ['center'],height=20))

trace1 = go.Bar(x=top_10['State/UnionTerritory'].head(10),
                y=top_10['Deaths'].head(10),
                  marker=dict(color='darkred'),opacity=0.60)
layout = dict(
    width=1000,
    height=430,
    title='Top-10 States with Highest deaths Cases',
    xaxis1=dict(**dict(domain=[0.58, 1])),
)
fig1 = dict(data=[trace, trace1], layout=layout)
iplot(fig1)

state_wise_cases=state_cases.sort_values('Confirmed', ascending= False).fillna(0).style\
                        .background_gradient(cmap='Blues',subset=["Confirmed"])\
                        .background_gradient(cmap='Reds',subset=["Deaths"])\
                        .background_gradient(cmap='Greens',subset=["Cured"])\
                        .background_gradient(cmap='Oranges',subset=["Active"])\
                        .background_gradient(cmap='RdYlBu',subset=["Death Rate (per 100)"])\
                        .background_gradient(cmap='Accent',subset=["Cure Rate (per 100)"])
state_wise_cases

"""## **3. Data Visulaization for Testing Details**"""

df_testing=pd.read_csv("/content/drive/MyDrive/Covid-19-Project/Major-Project-Datasets/StatewiseTestingDetails.csv")

from google.colab import drive
drive.mount('/content/drive')

df_testing.head()

# States with Total Sample collections
df_sample=df_testing.groupby('State')['TotalSamples'].sum().sort_values(ascending=False).reset_index()
df_sample.head()

#Bar graph for Total samples collected in top 10 states
px.bar(df_sample.head(10),x='State',y='TotalSamples',width=700, height=500,title='Total Samples Collected in Top 10 States')

#Positive cases
df_sample_positive=df_testing.groupby('State')['Positive'].sum().sort_values(ascending=False).reset_index()
df_sample_positive.head()

#Bar Graph for top 10 states with Positive Cases
px.bar(df_sample_positive.head(10),x='State',y='Positive',width=700, height=500,title='Total Positive Cases in Top 10 States')

"""## **4. Vaccination Analysis**"""

df_vaccine=pd.read_csv('/content/drive/MyDrive/Covid-19-Project/Major-Project-Datasets/covid_vaccine_statewise.csv')

df_vaccine.head()

df_vaccine.columns

#Vaccinated ratio for different genders
male = df_vaccine["Male(Individuals Vaccinated)"].sum() 
female = df_vaccine["Female(Individuals Vaccinated)"].sum()  
trans = df_vaccine["Transgender(Individuals Vaccinated)"].sum()
px.pie(names=["Male Vaccinated","Female Vaccinated","Trans Gender"],values=[male,female,trans],title="Vaccinated ratio for Covid19")

#Percentage of Covaxin and Covisheild Vaccinated
Covaxin = df_vaccine["Total Covaxin Administered"].sum() 
Covishield = df_vaccine["Total CoviShield Administered"].sum()  
px.pie(names=["Covaxin Vaccinated","Covishield Vaccinated"],values=[Covaxin,Covishield],title="Covaxin and Covishield Vaccination")

#Ratio of doses administred vs people vaccinated
Doses = df_vaccine["Total Doses Administered"].sum() 
Vaccinated = df_vaccine["Total Individuals Vaccinated"].sum()  
px.pie(names=["Doses Administered","People Vaccinated"],values=[Doses,Vaccinated],title="Doses administered vs People Vaccinated")

"""### Vaccine Analysis for states

"""

df_vaccine['State'].unique()

#Doses administered vs People Vaccinated in Telangana
df_Telangana=df_vaccine[df_vaccine['State']=='Telangana']
df_Maharashtra=df_vaccine[df_vaccine['State']=='Maharashtra']
df_Andhra_Pradesh=df_vaccine[df_vaccine['State']=='Andhra Pradesh']
Doses = df_Telangana["Total Doses Administered"].sum() 
Vaccinated = df_Telangana["Total Individuals Vaccinated"].sum()  
px.pie(names=["Doses Administered","People Vaccinated"],values=[Doses,Vaccinated],title="Doses administered vs People Vaccinated in Telangana")

#Doses administered vs People Vaccinated in Maharastra
Doses = df_Maharashtra["Total Doses Administered"].sum() 
Vaccinated = df_Maharashtra["Total Individuals Vaccinated"].sum()  
px.pie(names=["Doses Administered","People Vaccinated"],values=[Doses,Vaccinated],title="Doses administered vs People Vaccinated in Maharastra")

#Doses administered vs People Vaccinated in Andhra Pradesh
Doses = df_Andhra_Pradesh["Total Doses Administered"].sum() 
Vaccinated = df_Andhra_Pradesh["Total Individuals Vaccinated"].sum()  
px.pie(names=["Doses Administered","People Vaccinated"],values=[Doses,Vaccinated],title="Doses administered vs People Vaccinated in Andhra Pradesh")

"""## **5.Predictions of Confirmed Cases in India**"""

#Data Preprocessing


df = df.rename(columns = {'Date': 'ds'})

# Group data
df_group = df.groupby(by = 'ds')['Confirmed', 'Deaths', 'Cured'].sum()

# change index to datetime
df_group.index = pd.to_datetime(df_group.index)

# Set frequncy of time series
df_group = df_group.asfreq(freq = '1D')

# Sort the values
df_group = df_group.sort_index(ascending = True)

# Fill NA values with zero
df_group = df_group.fillna(value = 0)

df_group = df_group.rename(columns = {'Date': 'ds'})

# Show the end of the data
display(df_group.tail())
#display(df_group.head())

"""## ARIMA Model"""

#Splitting Data
model_train=df_group.iloc[:int(df_group.shape[0]*0.95)] #Training Data
valid=df_group.iloc[int(df_group.shape[0]*0.95):] #Testing data
valid_len = len(valid)
print(valid_len) 
y_pred=valid.copy()
#print(model_train,valid)

#Fitting the Model
model_arima= auto_arima(model_train["Confirmed"],method='cg',trace=True)#,stepwise=False,start_p=0,start_q=0,max_p=2,max_q=2)
model_arima.fit(model_train["Confirmed"])

prediction_arima=model_arima.predict(len(valid))
y_pred["ARIMA Model Prediction"]=prediction_arima

#RMSE 
rmse_scores=[]
arima_rmse_score = np.sqrt(mse(valid["Confirmed"],prediction_arima))/valid_len
rmse_scores.append(["ARIMA RMSE Score:",arima_rmse_score])
print("Root Mean Square Error for ARIMA Model: ",arima_rmse_score)
print(rmse_scores)

#Plotting the prediction for confirmed cases
fig=go.Figure()
fig.add_trace(go.Scatter(x=model_train.index, y=model_train["Confirmed"],
                    mode='lines+markers',name="Train Data for Confirmed Cases"))
fig.add_trace(go.Scatter(x=valid.index, y=valid["Confirmed"],
                    mode='lines+markers',name="Validation Data for Confirmed Cases",))
fig.add_trace(go.Scatter(x=valid.index, y=y_pred["ARIMA Model Prediction"],
                    mode='lines',name="Prediction for Confirmed Cases",line=dict(color='black', dash='dot')))
fig.update_layout(title="ARIMA Model Prediction for Confirmed Cases",
                 xaxis_title="Date",yaxis_title="Confirmed Cases")
fig.show()

#ARIMA Predictions for next 10 Days
ARIMA_Prediction=[]
new_date=[]
last_date = df_group.index[-1]
for i in range(1,11):
    new_date.append(last_date+timedelta(days=i+10))
    ARIMA_Prediction.append(model_arima.predict(len(valid)+i+10)[-1])

pd.options.display.float_format = '{:.3f}'.format
model_predictions=pd.DataFrame(zip(new_date,ARIMA_Prediction),
                               columns=['Dates', 'ARIMA_Prediction'])
print(model_predictions)

"""## Holts winter Model"""

#Splitting Data
model_train=df_group.iloc[:int(df_group.shape[0]*0.95)] #Training Data
valid=df_group.iloc[int(df_group.shape[0]*0.95):] #Testing Data
y_pred=valid.copy()

#Fitting the model
es=ExponentialSmoothing(np.asarray(model_train['Confirmed']),seasonal_periods=11, trend='mul', seasonal='mul').fit()
y_pred["Holt's Winter Model"]=es.forecast(len(valid))

#RMSE 
hw_rmse_score = np.sqrt(mse(y_pred["Confirmed"],y_pred["Holt's Winter Model"]))/valid_len
rmse_scores.append(["Holt's Winter RMSE Score:",hw_rmse_score])
print("Root Mean Square Error for Holt's Winter Model: ",hw_rmse_score)
print(rmse_scores)

#Plotting Holt's Winter Predictions
fig=go.Figure()
fig.add_trace(go.Scatter(x=model_train.index, y=model_train["Confirmed"],
                    mode='lines+markers',name="Train Data for Confirmed Cases"))
fig.add_trace(go.Scatter(x=valid.index, y=valid["Confirmed"],
                    mode='lines+markers',name="Validation Data for Confirmed Cases",))
fig.add_trace(go.Scatter(x=valid.index, y=y_pred["Holt\'s Winter Model"],
                    mode='lines',name="Prediction of Confirmed Cases",line=dict(color='black', dash='dot')))
fig.update_layout(title="Holt's Winter Model Predictions for Confirmed Cases",
                 xaxis_title="Date",yaxis_title="Confirmed Cases",legend=dict(x=0,y=1,traceorder="normal"))
fig.show()

#Holt's Winter Predictions for next 10 Days
holt_winter_new_prediction=[]
for i in range(1,11):
    holt_winter_new_prediction.append(es.forecast((len(valid)+i+10))[-1])
model_predictions["Holt's Winter Model Prediction"]=holt_winter_new_prediction
print(model_predictions)

"""## Holts Linear Model"""

#Splitting Data
model_train=df_group.iloc[:int(df_group.shape[0]*0.95)]  #Training Data
valid=df_group.iloc[int(df_group.shape[0]*0.95):] #Testing Data
y_pred=valid.copy()

#Fitting the Model
holt=Holt(np.asarray(model_train["Confirmed"])).fit(smoothing_level=0.2, smoothing_slope=1.3)
y_pred["Holt"]=holt.forecast(len(valid))

#RMSE 
hl_rmse_score = np.sqrt(mse(y_pred["Confirmed"],y_pred["Holt"]))/valid_len
rmse_scores.append(["Holt's Linear RMSE Score:",hl_rmse_score])
print("Root Mean Square Error for Holt's Linear Model: ",hl_rmse_score)
print(rmse_scores)

#Plotting Holt's Linear predcitions
fig=go.Figure()
fig.add_trace(go.Scatter(x=model_train.index, y=model_train["Confirmed"],
                    mode='lines+markers',name="Train Data for Confirmed Cases"))
fig.add_trace(go.Scatter(x=valid.index, y=valid["Confirmed"],
                    mode='lines+markers',name="Validation Data for Confirmed Cases",))
fig.add_trace(go.Scatter(x=valid.index, y=y_pred["Holt"],
                    mode='lines',name="Prediction of Confirmed Cases",line=dict(color='black', dash='dot')))
fig.update_layout(title="Holt's Linear Model Prediction for Confirmed Cases",
                 xaxis_title="Date",yaxis_title="Confirmed Cases",legend=dict(x=0,y=1,traceorder="normal"))
fig.show()

#Holt's Linear Predictions for next 10 days
holt_new_prediction=[]
for i in range(1,11):
    holt_new_prediction.append(holt.forecast((len(valid)+i+10))[-1])

model_predictions["Holt's Linear Model Prediction"]=holt_new_prediction
model_predictions.head()

"""## FB Prophet"""

df_prophet = df_group[['Confirmed']]
df_prophet = df_prophet.reset_index()
df_prophet = df_prophet.rename(columns = {'ds': 'ds', 'Confirmed': 'y'})
df_prophet['ds'] = pd.to_datetime(df_prophet['ds'])
m = Prophet(
    growth='linear', n_changepoints=30, changepoint_range=0.85)
m.fit(df_prophet)

#Fitting the model
future = m.make_future_dataframe(periods = 20)
forecast = m.predict(future)
fbprophet_score = np.sqrt(mean_squared_error(df_group["Confirmed"],forecast['yhat'].head(df_group.shape[0])))

#RMSE 
fbprophet_rmse_score = np.sqrt(mse(df_group["Confirmed"],forecast['yhat'].head(df_group.shape[0])))/valid_len
rmse_scores.append(["FB Prophet RMSE Score:",fbprophet_rmse_score])
print("Root Mean Square Error for FB Prophet Model: ",fbprophet_rmse_score)
print(rmse_scores)

figure = m.plot(forecast, xlabel = 'Date', ylabel = 'Confirmed Cases')

figure2 = m.plot_components(forecast)

#Facebook Prophet Predictions for next 10 days
model_predictions["Prophet's Prediction"]=list(forecast["yhat"].tail(10))
model_predictions.head()

"""## AR Model

"""

#Splitting the Data
model_train = df_group.iloc[:int(df_group.shape[0]*0.95)] #Training Data
valid = df_group.iloc[int(df_group.shape[0]*0.95):] #Testing Data
y_pred = valid.copy()

#Fitting the Model
model_ar = auto_arima(model_train["Confirmed"],start_q=0,max_q=0,start_p = 0, max_p = 7,stepwise= False,method = 'cg',trace=True, error_action='ignore')
model_ar.fit(model_train["Confirmed"])

prediction_ar = model_ar.predict(len(valid))
#print(prediction_ar)
#print(y_pred)
y_pred["AR Model Prediction Confirmed" ]=prediction_ar

#RMSE 
#rmse_scores = [] #for storing rmse values of all the models
ar_rmse_score = np.sqrt(mse(y_pred["Confirmed"],y_pred["AR Model Prediction Confirmed"]))/valid_len
rmse_scores.append(["AR RMSE Score:",ar_rmse_score])
print("Root Mean Square Error for AR Model: ",ar_rmse_score)
print(rmse_scores)

#Plotting AR predictions
fig=go.Figure()
fig.add_trace(go.Scatter(x=model_train.index, y=model_train["Confirmed"],
                    mode='lines+markers',name="Train Data for Confirmed Cases"))
fig.add_trace(go.Scatter(x=valid.index, y=valid["Confirmed"],
                    mode='lines+markers',name="Validation Data for Confirmed Cases",))
fig.add_trace(go.Scatter(x=valid.index, y=y_pred["AR Model Prediction Confirmed"],
                    mode='lines',name="Prediction of Confirmed Cases",line=dict(color='black', dash='dot')))
fig.update_layout(title="AR Model Prediction for Confirmed Cases",xaxis_title="Date",yaxis_title="Confirmed Cases")
fig.show()

#AR Model predictions for next 10 days
AR_model_new_prediction=[]
for i in range(1,11):
  AR_model_new_prediction.append(model_ar.predict(len(valid)+i+10)[-1])
model_predictions["AR Model Prediction"]=AR_model_new_prediction
model_predictions.head()

"""## MA Model"""

#Splitting the Data
model_train = df_group.iloc[:int(df_group.shape[0]*0.95)] #Training Data
valid = df_group.iloc[int(df_group.shape[0]*0.95):] #Testing Data
y_pred = valid.copy()

#Fitting the Model
model_ma= auto_arima(model_train["Confirmed"],trace=True, error_action='ignore',method='nm', start_p=0,max_p=0,start_q=0,max_q=5)
model_ma.fit(model_train["Confirmed"])

prediction_ma=model_ma.predict(len(valid))
y_pred["MA Model Prediction"]=prediction_ma

#RMSE 
ma_rmse_score = np.sqrt(mse(valid["Confirmed"],prediction_ma))/valid_len
rmse_scores.append(["MA RMSE Score:",ma_rmse_score])
print("Root Mean Square Error for MA Model: ",ma_rmse_score)
print(rmse_scores)

#Plotting MA predictions
fig=go.Figure()

fig.add_trace(go.Scatter(x=model_train.index, y=model_train["Confirmed"],
                    mode='lines+markers',name="Train Data for Confirmed Cases"))
fig.add_trace(go.Scatter(x=valid.index, y=valid["Confirmed"],
                    mode='lines+markers',name="Validation Data for Confirmed Cases",))
fig.add_trace(go.Scatter(x=valid.index, y=y_pred["MA Model Prediction"],
                    mode='lines',name="Prediction for Confirmed Cases",line=dict(color='black', dash='dot')))
fig.update_layout(title="MA Model Prediction for Confirmed Cases",
                 xaxis_title="Date",yaxis_title="Confirmed Cases")
fig.show()

#MA Model Predictions for next 10 Days
MA_model_new_prediction=[]
for i in range(1,11):
    MA_model_new_prediction.append(model_ma.predict(len(valid)+i+10)[-1])
model_predictions["MA Model Prediction"]=MA_model_new_prediction
model_predictions.head()

#rmse_scores.append(["MA RMSE Score:",ma_rmse_score])
rmse_summary = pd.DataFrame(rmse_scores,columns=["Model Name","Root Mean Squared Error"]).sort_values(["Root Mean Squared Error"])
print(rmse_summary)